#!/usr/bin/env python3
"""
Guia dos pr√≥ximos passos ap√≥s descobrir o IP do PC
"""

import os
import json
import requests
import time
from datetime import datetime

def check_config():
    """Verifica se a configura√ß√£o est√° correta"""
    print("üîç Verificando configura√ß√£o...")

    try:
        # Tenta ler config.py
        with open('config.py', 'r') as f:
            config_content = f.read()

        # Procura pelo IP do PC
        import re
        pc_ip_match = re.search(r'pc_ip\s*[:=]\s*["\']([^"\']+)["\']', config_content)

        if pc_ip_match:
            pc_ip = pc_ip_match.group(1)
            print(f"‚úÖ IP do PC configurado: {pc_ip}")
            return pc_ip
        else:
            print("‚ùå IP do PC n√£o encontrado em config.py")
            return None

    except FileNotFoundError:
        print("‚ùå Arquivo config.py n√£o encontrado")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao ler config.py: {e}")
        return None

def test_connection(pc_ip, pc_port=5000):
    """Testa conex√£o com o PC"""
    print(f"\nüß™ Testando conex√£o com {pc_ip}:{pc_port}...")

    try:
        # Teste b√°sico de conectividade
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((pc_ip, pc_port))
        sock.close()

        if result != 0:
            print("‚ùå Porta 5000 n√£o est√° acess√≠vel")
            return False

        # Teste da API
        response = requests.get(f"http://{pc_ip}:{pc_port}/test", timeout=10)

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Conex√£o com PC estabelecida!")
            print(f"   Status: {data.get('message', 'OK')}")
            return True
        else:
            print(f"‚ùå Resposta HTTP {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def register_raspberry(pc_ip, pc_port=5000):
    """Registra o Raspberry Pi no PC"""
    print("
üìù Registrando Raspberry Pi no PC..."    try:
        register_data = {
            'ip': get_local_ip(),
            'port': 8080,
            'status': {
                'battery': 85,
                'position': {'x': 0, 'y': 0, 'orientation': 0},
                'status': 'idle'
            },
            'timestamp': datetime.now().isoformat()
        }

        response = requests.post(
            f"http://{pc_ip}:{pc_port}/agv/register",
            json=register_data,
            timeout=15
        )

        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                raspberry_id = data.get('raspberry_id')
                print("‚úÖ Raspberry Pi registrado com sucesso!")
                print(f"   ID: {raspberry_id}")
                return True
            else:
                print(f"‚ùå Falha no registro: {data.get('error')}")
                return False
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Erro no registro: {e}")
        return False

def get_local_ip():
    """Obt√©m IP local do Raspberry Pi"""
    try:
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "127.0.0.1"

def start_agv_system():
    """Inicia o sistema AGV"""
    print("
üöÄ Iniciando sistema AGV..."    try:
        # Verifica se j√° est√° rodando
        import subprocess
        result = subprocess.run(
            ['pgrep', '-f', 'main.py'],
            capture_output=True,
            text=True
        )

        if result.returncode == 0:
            print("‚ö†Ô∏è  Sistema j√° est√° rodando")
            print("   Para parar: curl -X POST http://localhost:8080/shutdown")
            return True

        # Inicia em background
        print("   Executando: python main.py &")
        os.system("python main.py &")

        # Aguarda um pouco
        time.sleep(3)

        # Testa se iniciou
        try:
            response = requests.get("http://localhost:8080/status", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Sistema AGV iniciado com sucesso!")
                print("   API local: http://localhost:8080")
                return True
            else:
                print("‚ùå Sistema iniciou mas API n√£o responde")
                return False
        except:
            print("‚ùå Sistema n√£o iniciou corretamente")
            return False

    except Exception as e:
        print(f"‚ùå Erro ao iniciar sistema: {e}")
        return False

def show_next_steps(pc_ip):
    """Mostra pr√≥ximos passos"""
    print("
üéØ PR√ìXIMOS PASSOS:"    print("=" * 50)
    print("
1. üñ•Ô∏è  NO PC (mantenha rodando):"    print("   python app.py"    print("   # Backend deve estar rodando na porta 5000"    print("
2. ü§ñ NO RASPBERRY PI (j√° configurado):"    print("   Sistema AGV rodando em background"    print("   API local: http://localhost:8080"    print("
3. üåê ACESSO AO SISTEMA:"    print(f"   Web Interface: http://{pc_ip}:5000"    print("   Mobile App: Use o app instalado"    print("
4. üìä MONITORAMENTO:"    print("   Ver logs: tail -f /var/log/agv_system.log"    print("   Status API: curl http://localhost:8080/status"    print("
5. üß™ TESTES:"    print("   Teste comunica√ß√£o: python test_connection.py"    print("   Teste movimento: Use interface web"    print("
6. üîß MANUTEN√á√ÉO:"    print("   Parar sistema: curl -X POST http://localhost:8080/shutdown"    print("   Reiniciar: python main.py &"    print("
üìã FUNCIONALIDADES DISPON√çVEIS:"    print("   ‚úÖ Comunica√ß√£o PC ‚Üî Raspberry Pi"    print("   ‚úÖ Interface web completa"    print("   ‚úÖ App mobile"    print("   ‚è≥ ESP32 + motores (pr√≥xima fase)"    print("   ‚è≥ Vis√£o computacional (pr√≥xima fase)"    print("   ‚è≥ Navega√ß√£o aut√¥noma (pr√≥xima fase)"    print("
üéâ SISTEMA AGV OPERACIONAL!"    print("
üí° DICAS:"    print("   - Mantenha PC e Raspberry na mesma rede WiFi"    print("   - Monitore logs para detectar problemas"    print("   - Use interface web para controlar AGV"    print("   - Teste funcionalidades gradualmente"    print("
üö® EM CASO DE PROBLEMAS:"    print("   1. Verifique se PC est√° acess√≠vel: ping " + pc_ip)
    print("   2. Teste comunica√ß√£o: python test_connection.py"    print("   3. Verifique logs: tail -f /var/log/agv_system.log"    print("   4. Consulte: cat TROUBLESHOOTING.md"    print("
üéä Parab√©ns! Seu sistema AGV est√° pronto para uso!"def main():
    """Fun√ß√£o principal"""
    print("üéØ GUIA DOS PR√ìXIMOS PASSOS - Sistema AGV")
    print("=" * 50)

    # Verifica configura√ß√£o
    pc_ip = check_config()
    if not pc_ip:
        print("
‚ùå Configura√ß√£o incompleta!"        print("Execute primeiro: python find_pc_ip.py"        return

    # Testa conex√£o
    if not test_connection(pc_ip):
        print("
‚ùå Problema de conectividade!"        print("Verifique se o PC est√° ligado e o backend rodando"        return

    # Registra Raspberry Pi
    if not register_raspberry(pc_ip):
        print("
‚ùå Falha no registro!"        print("Verifique conectividade e tente novamente"        return

    # Inicia sistema AGV
    if not start_agv_system():
        print("
‚ùå Falha ao iniciar sistema!"        print("Verifique logs e tente novamente"        return

    # Mostra pr√≥ximos passos
    show_next_steps(pc_ip)

if __name__ == "__main__":
    main()