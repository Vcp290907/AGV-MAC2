{"ast":null,"code":"import * as React from 'react';\nimport * as Utils from './WebCameraUtils';\nimport { FacingModeToCameraType } from './WebConstants';\nconst VALID_SETTINGS_KEYS = ['autoFocus', 'flashMode', 'exposureCompensation', 'colorTemperature', 'iso', 'brightness', 'contrast', 'saturation', 'sharpness', 'focusDistance', 'whiteBalance', 'zoom'];\nfunction useLoadedVideo(video, onLoaded) {\n  React.useEffect(() => {\n    if (video) {\n      video.addEventListener('loadedmetadata', () => {\n        requestAnimationFrame(() => {\n          onLoaded();\n        });\n      });\n    }\n  }, [video]);\n}\nexport function useWebCameraStream(video, preferredType, settings, {\n  onCameraReady,\n  onMountError\n}) {\n  const isStartingCamera = React.useRef(false);\n  const activeStreams = React.useRef([]);\n  const capabilities = React.useRef({\n    autoFocus: 'continuous',\n    flashMode: 'off',\n    whiteBalance: 'continuous',\n    zoom: 1\n  });\n  const [stream, setStream] = React.useState(null);\n  const mediaTrackSettings = React.useMemo(() => {\n    return stream ? stream.getTracks()[0].getSettings() : null;\n  }, [stream]);\n  const type = React.useMemo(() => {\n    if (!mediaTrackSettings) {\n      return null;\n    }\n    const {\n      facingMode = 'user'\n    } = mediaTrackSettings;\n    return FacingModeToCameraType[facingMode];\n  }, [mediaTrackSettings]);\n  const getStreamDeviceAsync = React.useCallback(async () => {\n    try {\n      return await Utils.getPreferredStreamDevice(preferredType);\n    } catch (nativeEvent) {\n      if (__DEV__) {\n        console.warn(`Error requesting UserMedia for type \"${preferredType}\":`, nativeEvent);\n      }\n      if (onMountError) {\n        onMountError({\n          nativeEvent\n        });\n      }\n      return null;\n    }\n  }, [preferredType, onMountError]);\n  const resumeAsync = React.useCallback(async () => {\n    const nextStream = await getStreamDeviceAsync();\n    if (Utils.compareStreams(nextStream, stream)) {\n      return false;\n    }\n    if (!activeStreams.current.some(value => value.id === nextStream?.id)) {\n      activeStreams.current.push(nextStream);\n    }\n    setStream(nextStream);\n    if (onCameraReady) {\n      onCameraReady();\n    }\n    return false;\n  }, [getStreamDeviceAsync, setStream, onCameraReady, stream, activeStreams.current]);\n  React.useEffect(() => {\n    if (isStartingCamera.current) {\n      return;\n    }\n    isStartingCamera.current = true;\n    resumeAsync().then(isStarting => {\n      isStartingCamera.current = isStarting;\n    }).catch(() => {\n      isStartingCamera.current = false;\n    });\n  }, [preferredType]);\n  React.useEffect(() => {\n    const changes = {};\n    for (const key of VALID_SETTINGS_KEYS) {\n      if (key in settings) {\n        const nextValue = settings[key];\n        if (nextValue !== capabilities.current[key]) {\n          changes[key] = nextValue;\n        }\n      }\n    }\n    const hasChanges = !!Object.keys(changes).length;\n    const nextWebCameraSettings = Object.assign({}, capabilities.current, changes);\n    if (hasChanges) {\n      Utils.syncTrackCapabilities(preferredType, stream, changes);\n    }\n    capabilities.current = nextWebCameraSettings;\n  }, [settings.autoFocus, settings.flashMode, settings.exposureCompensation, settings.colorTemperature, settings.iso, settings.brightness, settings.contrast, settings.saturation, settings.sharpness, settings.focusDistance, settings.whiteBalance, settings.zoom]);\n  React.useEffect(() => {\n    if (!video.current) {\n      return;\n    }\n    Utils.setVideoSource(video.current, stream);\n  }, [video.current, stream]);\n  React.useEffect(() => {\n    return () => {\n      for (const stream of activeStreams.current) {\n        Utils.stopMediaStream(stream);\n      }\n      if (video.current) {\n        Utils.setVideoSource(video.current, stream);\n      }\n    };\n  }, []);\n  useLoadedVideo(video.current, () => {\n    Utils.syncTrackCapabilities(preferredType, stream, capabilities.current);\n  });\n  return {\n    type,\n    mediaTrackSettings\n  };\n}","map":{"version":3,"names":["React","Utils","FacingModeToCameraType","VALID_SETTINGS_KEYS","useLoadedVideo","video","onLoaded","useEffect","addEventListener","requestAnimationFrame","useWebCameraStream","preferredType","settings","onCameraReady","onMountError","isStartingCamera","useRef","activeStreams","capabilities","autoFocus","flashMode","whiteBalance","zoom","stream","setStream","useState","mediaTrackSettings","useMemo","getTracks","getSettings","type","facingMode","getStreamDeviceAsync","useCallback","getPreferredStreamDevice","nativeEvent","__DEV__","console","warn","resumeAsync","nextStream","compareStreams","current","some","value","id","push","then","isStarting","catch","changes","key","nextValue","hasChanges","Object","keys","length","nextWebCameraSettings","assign","syncTrackCapabilities","exposureCompensation","colorTemperature","iso","brightness","contrast","saturation","sharpness","focusDistance","setVideoSource","stopMediaStream"],"sources":["C:\\Users\\vcp_2\\Desktop\\Bentao\\TCC\\AGV-MAC2\\agv-mobile\\node_modules\\expo-camera\\src\\web\\useWebCameraStream.ts"],"sourcesContent":["/* eslint-env browser */\nimport * as React from 'react';\n\nimport * as Utils from './WebCameraUtils';\nimport { FacingModeToCameraType } from './WebConstants';\nimport {\n  CameraReadyListener,\n  CameraType,\n  MountErrorListener,\n  WebCameraSettings,\n} from '../Camera.types';\n\nconst VALID_SETTINGS_KEYS = [\n  'autoFocus',\n  'flashMode',\n  'exposureCompensation',\n  'colorTemperature',\n  'iso',\n  'brightness',\n  'contrast',\n  'saturation',\n  'sharpness',\n  'focusDistance',\n  'whiteBalance',\n  'zoom',\n] as const;\n\nfunction useLoadedVideo(video: HTMLVideoElement | null, onLoaded: () => void) {\n  React.useEffect(() => {\n    if (video) {\n      video.addEventListener('loadedmetadata', () => {\n        // without this async block the constraints aren't properly applied to the camera,\n        // this means that if you were to turn on the torch and swap to the front camera,\n        // then swap back to the rear camera the torch setting wouldn't be applied.\n        requestAnimationFrame(() => {\n          onLoaded();\n        });\n      });\n    }\n  }, [video]);\n}\n\nexport function useWebCameraStream(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  preferredType: CameraType,\n  settings: Record<string, any>,\n  {\n    onCameraReady,\n    onMountError,\n  }: { onCameraReady?: CameraReadyListener; onMountError?: MountErrorListener }\n): {\n  type: CameraType | null;\n  mediaTrackSettings: MediaTrackSettings | null;\n} {\n  const isStartingCamera = React.useRef<boolean | null>(false);\n  const activeStreams = React.useRef<MediaStream[]>([]);\n  const capabilities = React.useRef<WebCameraSettings>({\n    autoFocus: 'continuous',\n    flashMode: 'off',\n    whiteBalance: 'continuous',\n    zoom: 1,\n  });\n  const [stream, setStream] = React.useState<MediaStream | null>(null);\n\n  const mediaTrackSettings = React.useMemo(() => {\n    return stream ? stream.getTracks()[0].getSettings() : null;\n  }, [stream]);\n\n  // The actual camera type - this can be different from the incoming camera type.\n  const type = React.useMemo(() => {\n    if (!mediaTrackSettings) {\n      return null;\n    }\n    // On desktop no value will be returned, in this case we should assume the cameraType is 'front'\n    const { facingMode = 'user' } = mediaTrackSettings;\n    return FacingModeToCameraType[facingMode];\n  }, [mediaTrackSettings]);\n\n  const getStreamDeviceAsync = React.useCallback(async (): Promise<MediaStream | null> => {\n    try {\n      return await Utils.getPreferredStreamDevice(preferredType);\n    } catch (nativeEvent: any) {\n      if (__DEV__) {\n        console.warn(`Error requesting UserMedia for type \"${preferredType}\":`, nativeEvent);\n      }\n      if (onMountError) {\n        onMountError({ nativeEvent });\n      }\n      return null;\n    }\n  }, [preferredType, onMountError]);\n\n  const resumeAsync = React.useCallback(async (): Promise<boolean> => {\n    const nextStream = await getStreamDeviceAsync();\n    if (Utils.compareStreams(nextStream, stream)) {\n      // Do nothing if the streams are the same.\n      // This happens when the device only supports one camera (i.e. desktop) and the mode was toggled between front/back while already active.\n      // Without this check there is a screen flash while the video switches.\n      return false;\n    }\n\n    // Save a history of all active streams (usually 2+) so we can close them later.\n    // Keeping them open makes swapping camera types much faster.\n    if (!activeStreams.current.some((value) => value.id === nextStream?.id)) {\n      activeStreams.current.push(nextStream!);\n    }\n\n    // Set the new stream -> update the video, settings, and actual camera type.\n    setStream(nextStream);\n    if (onCameraReady) {\n      onCameraReady();\n    }\n    return false;\n  }, [getStreamDeviceAsync, setStream, onCameraReady, stream, activeStreams.current]);\n\n  React.useEffect(() => {\n    // Restart the camera and guard concurrent actions.\n    if (isStartingCamera.current) {\n      return;\n    }\n    isStartingCamera.current = true;\n\n    resumeAsync()\n      .then((isStarting) => {\n        isStartingCamera.current = isStarting;\n      })\n      .catch(() => {\n        // ensure the camera can be started again.\n        isStartingCamera.current = false;\n      });\n  }, [preferredType]);\n\n  // Update the native camera with any custom capabilities.\n  React.useEffect(() => {\n    const changes: WebCameraSettings = {};\n\n    for (const key of VALID_SETTINGS_KEYS) {\n      if (key in settings) {\n        const nextValue = settings[key];\n        if (nextValue !== capabilities.current[key]) {\n          changes[key] = nextValue;\n        }\n      }\n    }\n\n    // Only update the native camera if changes were found\n    const hasChanges = !!Object.keys(changes).length;\n\n    const nextWebCameraSettings = { ...capabilities.current, ...changes };\n    if (hasChanges) {\n      Utils.syncTrackCapabilities(preferredType, stream, changes);\n    }\n\n    capabilities.current = nextWebCameraSettings;\n  }, [\n    settings.autoFocus,\n    settings.flashMode,\n    settings.exposureCompensation,\n    settings.colorTemperature,\n    settings.iso,\n    settings.brightness,\n    settings.contrast,\n    settings.saturation,\n    settings.sharpness,\n    settings.focusDistance,\n    settings.whiteBalance,\n    settings.zoom,\n  ]);\n\n  React.useEffect(() => {\n    // set or unset the video source.\n    if (!video.current) {\n      return;\n    }\n    Utils.setVideoSource(video.current, stream);\n  }, [video.current, stream]);\n\n  React.useEffect(() => {\n    return () => {\n      // Clean up on dismount, this is important for making sure the camera light goes off when the component is removed.\n      for (const stream of activeStreams.current) {\n        // Close all open streams.\n        Utils.stopMediaStream(stream);\n      }\n      if (video.current) {\n        // Invalidate the video source.\n        Utils.setVideoSource(video.current, stream);\n      }\n    };\n  }, []);\n\n  // Update props when the video loads.\n  useLoadedVideo(video.current, () => {\n    Utils.syncTrackCapabilities(preferredType, stream, capabilities.current);\n  });\n\n  return {\n    type,\n    mediaTrackSettings,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}